include(CheckIncludeFile)
include(CheckIncludeFiles)
include(CheckFunctionExists)
include(CheckSymbolExists)
include(CheckTypeSize)
include(CheckStructHasMember)
include(TestBigEndian)
include(GNUInstallDirs)

# TODO: How to check seccomp correctly?
find_package(Seccomp)

#check_function_exists("asprintf" HAVE_ASPRINTF)
check_function_exists("bcopy" HAVE_BCOPY)
check_function_exists("ctime_r" HAVE_CTIME_R)
check_function_exists("dprintf" HAVE_DPRINTF)
check_function_exists("fmtcheck" HAVE_FMTCHECK)
check_function_exists("fork" HAVE_FORK)
check_function_exists("getline" HAVE_GETLINE)
check_function_exists("getpagesize" HAVE_GETPAGESIZE)
check_function_exists("localtime_r" HAVE_LOCALTIME_R)
check_function_exists("mbrtowc" HAVE_MBRTOWC)
check_function_exists("mmap" HAVE_MMAP)
check_function_exists("pipe2" HAVE_PIPE2)
check_function_exists("posix_spawnp" HAVE_POSIX_SPAWNP)
check_function_exists("strcasestr" HAVE_STRCASESTR)
check_function_exists("strndup" HAVE_STRNDUP)
check_function_exists("strlcat" HAVE_STRLCAT)
check_function_exists("strlcpy" HAVE_STRLCPY)
check_function_exists("strtof" HAVE_STRTOF)
check_function_exists("utimes" HAVE_UTIMES)
check_function_exists("vasprintf" HAVE_VASPRINTF)
check_function_exists("wcwidth" HAVE_WCWIDTH)
check_include_file("byteswap.h" HAVE_BYTESWAP_H)
check_include_file("bzlib.h" HAVE_BZLIB_H)
check_include_file("dlfcn.h" HAVE_DLFCN_H)
check_include_file("fcntl.h" HAVE_FCNTL_H)
check_include_file("getopt.h" HAVE_GETOPT_H)
check_include_file("inttypes.h" HAVE_INTTYPES_H)
check_include_file("lzma.h" HAVE XZLIB_H)
check_include_file("lzma.h" HAVE_LZMA_H)
check_include_file("memory.h" HAVE_MEMORY_H)
check_include_file("nbtool_config.h" HAVE_NBTOOL_CONFIG_H)
check_include_file("spawn.h" HAVE_SPAWN_H)
check_include_file("stdint.h" HAVE_STDINT_H)
check_include_file("stdlib.h" HAVE_STDLIB_H)
check_include_file("string.h" HAVE_STRING_H)
check_include_file("strings.h" HAVE_STRINGS_H)
check_include_file("sys/bswap.h" HAVE_SYS_BSWAP_H)
check_include_file("sys/ioctl.h" HAVE_SYS_IOCTL_H)
check_include_file("sys/mman.h" HAVE_SYS_MMAN_H)
check_include_file("sys/stat.h" HAVE_SYS_STAT_H)
check_include_file("sys/sysmacros.h" HAVE_SYS_SYSMACROS_H)
check_include_file("sys/time.h" HAVE_SYS_TIME_H)
check_include_file("sys/types.h" HAVE_SYS_TYPES_H)
check_include_file("sys/utime.h" HAVE_SYS_UTIME_H)
check_include_file("sys/wait.h" HAVE_SYS_WAIT_H)
check_include_file("unistd.h" HAVE_UNISTD_H)
check_include_file("utime.h" HAVE_UTIME_H)
check_include_file("wchar.h" HAVE_WCHAR_H)
check_include_file("wctype.h" HAVE_WCTYPE_H)
check_include_file("xlocale.h" HAVE_XLOCALE_H)
check_include_file("zlib.h" HAVE_ZLIB_H)
check_include_files("err.h" HAVE_ERR_H)
check_struct_has_member("struct stat" "st_rdev" "sys/stat.h" HAVE_STRUCT_STAT_ST_RDEV)
check_struct_has_member("struct tm" "tm_gmtoff" "time.h" HAVE_STRUCT_TM_TM_GMTOFF)
check_struct_has_member("struct tm" "tm_zone" "time.h" HAVE_STRUCT_TM_TM_ZONE)
check_symbol_exists("asctime_r" "time.h" HAVE_ASCTIME_R)
check_symbol_exists("freelocale" "locale.h" HAVE_FREELOCALE)
check_symbol_exists("gmtime_r" "time.h" HAVE_GMTIME_R)
check_symbol_exists("major" "sys/mkdev.h" MAJOR_IN_MKDEV)
check_symbol_exists("memmem" "string.h" HAVE_MEMMEM)
check_symbol_exists("memmove" "string.h" HAVE_MEMMOVE)
check_symbol_exists("mkstemp" "stdlib.h;unistd.h" HAVE_MKSTEMP)
check_symbol_exists("newlocale" "locale.h" HAVE_NEWLOCALE)
check_symbol_exists("optreset" "getopt.h" HAVE_DECL_OPTRESET)
check_symbol_exists("pread" "unistd.h" HAVE_PREAD)
check_symbol_exists("uselocale" "locale.h" HAVE_USELOCALE)
check_symbol_exists("utime" "utime.h" HAVE_UTIME)

#/* Define to 1 if you have the ANSI C header files. */
check_include_files("stdlib.h;stdarg.h;string.h;float.h" STDC_HEADERS)

test_big_endian(WORDS_BIGENDIAN)
#/* 1234 = LIL_ENDIAN, 4321 = BIGENDIAN */
if(WORDS_BIGENDIAN)
    set(BYTEORDER 4321)
else(WORDS_BIGENDIAN)
    set(BYTEORDER 1234)
endif(WORDS_BIGENDIAN)

if(HAVE_SYS_TYPES_H)
    check_symbol_exists("off_t" "sys/types.h" OFF_T)
    check_symbol_exists("size_t" "sys/types.h" SIZE_T)
else(HAVE_SYS_TYPES_H)
    set(OFF_T "long")
    set(SIZE_T "unsigned")
endif(HAVE_SYS_TYPES_H)

# Handle HAVE_SIG_T
set(CMAKE_EXTRA_INCLUDE_FILES "signal.h")
check_type_size("sig_t" SIG_T LANGUAGE "CXX")
check_type_size("sighandler_t" SIGHANDLER_T LANGUAGE "CXX")
check_type_size("struct option" STRUCT_OPTION)
set(CMAKE_EXTRA_INCLUDE_FILES)
if (NOT HAVE_SIGHANDLER_T)
  if (HAVE_SIG_T)
    add_definitions(-Dsighandler_t=sig_t)
  else()
    message(FATAL_ERROR "Platform defines neither sig_t nor sighandler_t")
  endif()
endif()

option(BUILTIN_ELF "Define if built-in ELF support is used" "ON")
option(ELFCORE "Define for ELF core file support" "ON")
option(ZLIB "Define for zlib compression support" "ON")
option(BZLIB "Define for bz2lib compression support" "ON")
option(XZLIB "Define for liblzma/xz compression support" "ON")
option(LIBSECCOMP "Define for libseccomp sandboxing" "ON")

if(ZLIB AND HAVE_ZLIB_H)
  set(ZLIBSUPPORT)
endif()

if(BZLIB AND HAVE_BZLIB_H)
  set(BZLIBSUPPORT)
endif()

if(XZLIB AND HAVE_XZLIB_H)
  set(XZLIBSUPPORT)
endif()

if(LIBSECCOMP AND Seccomp_FOUND)
  set(HAVE_LIBSECCOMP)
endif()

MACRO(REPLACE_FUNCTIONS sources)
  FOREACH(name ${ARGN})
    STRING(TOUPPER have_${name} SYMBOL_NAME)
    CHECK_FUNCTION_EXISTS(${name} ${SYMBOL_NAME})
    IF(NOT ${SYMBOL_NAME})
      SET(${sources} ${${sources}} ${name}.c)
    ENDIF(NOT ${SYMBOL_NAME})
  ENDFOREACH(name)
ENDMACRO(REPLACE_FUNCTIONS)

add_definitions(-DMAGIC="${CMAKE_INSTALL_DATADIR}/magic")

string(REPLACE "." "" VERSION ${PROJECT_VERSION})

CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/cmake/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/src/magic.h.in ${CMAKE_CURRENT_BINARY_DIR}/magic.h)
